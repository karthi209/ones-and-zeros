name: build-n-release

on:
  workflow_dispatch:
    inputs:
      build_frontend:
        description: 'Build frontend image?'
        required: true
        default: 'true'
        type: boolean
      build_backend:
        description: 'Build backend image?'
        required: true
        default: 'true'
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend image?'
        required: true
        default: 'false'
        type: boolean
      deploy_backend:
        description: 'Deploy backend image?'
        required: true
        default: 'false'
        type: boolean
      frontend_version:
        description: 'Frontend version to deploy'
        required: true
        default: 'v1.0.1'
        type: string
      backend_version:
        description: 'Backend version to deploy'
        required: true
        default: 'v1.0.1'
        type: string

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  build:
    if: ${{ github.event.inputs.build_frontend == 'true' }} || ${{ github.event.inputs.build_backend== 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read current versions from VERSION.txt
        id: read_versions
        run: |
          FRONTEND_VERSION=$(grep "frontend=" VERSION.txt | cut -d '=' -f 2)
          BACKEND_VERSION=$(grep "backend=" VERSION.txt | cut -d '=' -f 2)
          echo "FRONTEND_VERSION=$FRONTEND_VERSION" >> $GITHUB_ENV
          echo "BACKEND_VERSION=$BACKEND_VERSION" >> $GITHUB_ENV
          
      - name: Increment frontend version
        if: ${{ github.event.inputs.build_frontend == 'true' }}
        run: |
          FRONTEND_VERSION_NO_V=$(echo ${{ env.FRONTEND_VERSION }} | sed 's/^v//')  # Remove leading 'v' if present
          FRONTEND_NEW_VERSION="v$(echo $FRONTEND_VERSION_NO_V | cut -d'.' -f1).$(echo $FRONTEND_VERSION_NO_V | cut -d'.' -f2).$(($(echo $FRONTEND_VERSION_NO_V | cut -d'.' -f3) + 1))"
          echo "New frontend version: $FRONTEND_NEW_VERSION"
          echo "FRONTEND_NEW_VERSION=$FRONTEND_NEW_VERSION" >> $GITHUB_ENV

      - name: Increment backend version
        if: ${{ github.event.inputs.build_backend == 'true' }}
        run: |
          BACKEND_VERSION_NO_V=$(echo ${{ env.BACKEND_VERSION }} | sed 's/^v//')  # Remove leading 'v' if present
          BACKEND_NEW_VERSION="v$(echo $BACKEND_VERSION_NO_V | cut -d'.' -f1).$(echo $BACKEND_VERSION_NO_V | cut -d'.' -f2).$(($(echo $BACKEND_VERSION_NO_V | cut -d'.' -f3) + 1))"
          echo "New backend version: $BACKEND_NEW_VERSION"
          echo "BACKEND_NEW_VERSION=$BACKEND_NEW_VERSION" >> $GITHUB_ENV

      # Manually build and push frontend image
      - name: Build and push frontend image
        if: ${{ github.event.inputs.build_frontend == 'true' }}
        id: push_frontend
        run: |
          docker build -t ghcr.io/karthi209/ones-and-zeros/frontend:${{ env.FRONTEND_NEW_VERSION }} -f Dockerfile .
          docker push ghcr.io/karthi209/ones-and-zeros/frontend:${{ env.FRONTEND_NEW_VERSION }}

      # Manually build and push backend image
      - name: Build and push backend image
        if: ${{ github.event.inputs.build_backend == 'true' }}
        id: push_backend
        run: |
          docker build -t ghcr.io/karthi209/ones-and-zeros/backend:${{ env.BACKEND_NEW_VERSION }} -f ./backend/core/Dockerfile .
          docker push ghcr.io/karthi209/ones-and-zeros/backend:${{ env.BACKEND_NEW_VERSION }}

      # Only update the version if the push succeeded
      - name: Update frontend version in VERSION.txt
        if: ${{ github.event.inputs.build_frontend == 'true' && steps.push_frontend.outcome == 'success' }}
        run: |
          sed -i "s/frontend=.*/frontend=${{ env.FRONTEND_NEW_VERSION }}/" VERSION.txt
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add VERSION.txt
          git commit -m "Update frontend version"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.ref }}

      - name: Update backend version in VERSION.txt
        if: ${{ github.event.inputs.build_backend == 'true' && steps.push_backend.outcome == 'success' }}
        run: |
          sed -i "s/backend=.*/backend=${{ env.BACKEND_NEW_VERSION }}/" VERSION.txt
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add VERSION.txt
          git commit -m "Update backend version"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.ref }}

  deploy_frontend:
    if: ${{ github.event.inputs.deploy_frontend == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy frontend Docker container to production server using SSH with password
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} << 'EOF'
          
            docker pull ghcr.io/karthi209/ones-and-zeros/frontend:${{ github.event.inputs.frontend_version }}

            docker stop frontend-container || true
            docker rm frontend-container || true

            # Run new frontend container
            docker run -d --name frontend-container -p 80:3000 ghcr.io/karthi209/ones-and-zeros/frontend:${{ github.event.inputs.frontend_version }}

            # Set frontend container to restart automatically unless stopped manually
            docker update --restart unless-stopped frontend-container
          EOF

      - name: Verify frontend deployment
        run: |
          # SSH into the server and check frontend container status
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} "docker ps | grep frontend-container"

  deploy_backend:
    if: ${{ github.event.inputs.deploy_backend == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy backend Docker container to production server using SSH with password
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} << 'EOF'
            # Pull the latest Docker backend image
            docker pull ghcr.io/karthi209/ones-and-zeros/backend:${{ github.event.inputs.backend_version }}

            # Stop and remove old backend container if it exists
            docker stop backend-container || true
            docker rm backend-container || true

            # Run new backend container
            docker run -d --name backend-container -p 5000:5000 ghcr.io/karthi209/ones-and-zeros/backend:${{ github.event.inputs.backend_version }}

            # Set backend container to restart automatically unless stopped manually
            docker update --restart unless-stopped backend-container
          EOF

      - name: Verify backend deployment
        run: |
          # SSH into the server and check backend container status
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} "docker ps | grep backend-container"
