name: build-dockercompose

on:
  workflow_dispatch:
    inputs:
      build_frontend:
        description: 'Build frontend image'
        required: true
        default: 'false'
        type: boolean
      build_backend:
        description: 'Build backend image'
        required: true
        default: 'false'
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend image'
        required: true
        default: 'false'
        type: boolean
      deploy_backend:
        description: 'Deploy backend image'
        required: true
        default: 'false'
        type: boolean
      frontend_version:
        description: 'Frontend version to deploy (optional): eg: v1.0.0'
        required: false
        type: string
      backend_version:
        description: 'Backend version to deploy (optional): eg: v1.0.0'
        required: false
        type: string

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          clean: true

      - name: Install dependecies
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read current versions from VERSION.txt
        id: read_versions
        run: |
          FRONTEND_VERSION=$(grep "frontend=" VERSION.txt | cut -d '=' -f 2)
          BACKEND_VERSION=$(grep "backend=" VERSION.txt | cut -d '=' -f 2)
          echo "FRONTEND_VERSION=$FRONTEND_VERSION" >> $GITHUB_ENV
          echo "BACKEND_VERSION=$BACKEND_VERSION" >> $GITHUB_ENV
          
      - name: Increment frontend version
        if: ${{ github.event.inputs.build_frontend == 'true' }}
        run: |
          FRONTEND_VERSION_NO_V=$(echo ${{ env.FRONTEND_VERSION }} | sed 's/^v//')  # Remove leading 'v' if present
          FRONTEND_NEW_VERSION="v$(echo $FRONTEND_VERSION_NO_V | cut -d'.' -f1).$(echo $FRONTEND_VERSION_NO_V | cut -d'.' -f2).$(($(echo $FRONTEND_VERSION_NO_V | cut -d'.' -f3) + 1))"
          echo "New frontend version: $FRONTEND_NEW_VERSION"
          echo "FRONTEND_NEW_VERSION=$FRONTEND_NEW_VERSION" >> $GITHUB_ENV

      - name: Increment backend version
        if: ${{ github.event.inputs.build_backend == 'true' }}
        run: |
          BACKEND_VERSION_NO_V=$(echo ${{ env.BACKEND_VERSION }} | sed 's/^v//')  # Remove leading 'v' if present
          BACKEND_NEW_VERSION="v$(echo $BACKEND_VERSION_NO_V | cut -d'.' -f1).$(echo $BACKEND_VERSION_NO_V | cut -d'.' -f2).$(($(echo $BACKEND_VERSION_NO_V | cut -d'.' -f3) + 1))"
          echo "New backend version: $BACKEND_NEW_VERSION"
          echo "BACKEND_NEW_VERSION=$BACKEND_NEW_VERSION" >> $GITHUB_ENV

      # Build and push images using Docker Compose
      - name: Build and push images
        if: ${{ github.event.inputs.build_frontend == 'true' || github.event.inputs.build_backend == 'true' }}
        run: |
          # Update Docker Compose file with new versions
          if [ "${{ github.event.inputs.build_frontend }}" == "true" ]; then
            sed -i "s|ghcr.io/karthi209/ones-and-zeros/frontend:.*|ghcr.io/karthi209/ones-and-zeros/frontend:${{ env.FRONTEND_NEW_VERSION }}|" docker-compose.yml
          fi
          if [ "${{ github.event.inputs.build_backend }}" == "true" ]; then
            sed -i "s|ghcr.io/karthi209/ones-and-zeros/backend:.*|ghcr.io/karthi209/ones-and-zeros/backend:${{ env.BACKEND_NEW_VERSION }}|" docker-compose.yml
          fi

          # Build and push the images using Docker Compose
          docker-compose build
          docker-compose push

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_frontend == 'true' || github.event.inputs.deploy_backend == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          clean: true

      - name: Pull latest changes from repository
        run: git pull origin HEAD

      - name: Read frontend version from VERSION.txt
        run: |
            FRONTEND_VERSION=$(grep "frontend=" VERSION.txt | cut -d '=' -f 2)
            echo "FRONTEND_VERSION=$FRONTEND_VERSION" >> $GITHUB_ENV

      - name: Use frontend version from input or VERSION.txt
        run: |
            if [ -z "${{ github.event.inputs.frontend_version }}" ]; then
                echo "Using frontend version from VERSION.txt: ${{ env.FRONTEND_VERSION }}"
                FRONTEND_VERSION_TO_DEPLOY="${{ env.FRONTEND_VERSION }}"
            else
                echo "Using frontend version from input: ${{ github.event.inputs.frontend_version }}"
                FRONTEND_VERSION_TO_DEPLOY="${{ github.event.inputs.frontend_version }}"
            fi
            echo "FRONTEND_VERSION_TO_DEPLOY=$FRONTEND_VERSION_TO_DEPLOY" >> $GITHUB_ENV

      - name: Generate Nginx configuration
        run: |
          cat <<EOF > dynamic-nginx.conf
          server {
              listen 80;
              server_name localhost;
      
              location / {
                  proxy_pass http://frontend:5173; # Proxy requests to the React frontend
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
      
              location /api/ {
                  proxy_pass http://backend:3000; # Proxy API requests to the backend
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
      
              error_page 404 /index.html;
              location = /index.html {
                  root /usr/share/nginx/html;
              }
          }
          EOF
      
      - name: Deploy services using Docker Compose
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          # SCP to upload dynamic-nginx.conf to the server
          echo "Uploading Nginx configuration..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no dynamic-nginx.conf ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }}:/tmp/
      
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} << 'EOF'
            cd /tmp/tmp_gitrepos  # Ensure you're in the project directory
            rm -rf ./*
            # Clone the repo if it's not already present
            git clone https://github.com/karthi209/ones-and-zeros.git .
            git pull origin main
      
            echo "Updating Nginx configuration..."
            cd ..
            mv dynamic-nginx.conf ./nginx.conf
            chmod 644 ./nginx.conf  # Ensure Nginx can read the config

            cd /tmp/tmp_gitrepos
            # Update Docker Compose file with new versions
            sed -i "s|ghcr.io/karthi209/ones-and-zeros/frontend:.*|ghcr.io/karthi209/ones-and-zeros/frontend:${{ github.sha }}|" docker-compose.yml
            sed -i "s|ghcr.io/karthi209/ones-and-zeros/backend:.*|ghcr.io/karthi209/ones-and-zeros/backend:${{ github.sha }}|" docker-compose.yml
      
            # Pull new images and restart services
            docker-compose pull
            docker-compose down
            docker-compose up -d
            docker-compose up -d --force-recreate nginx
      
            # Reload Nginx to apply the new config
            docker exec -it nginx nginx -s reload
      
            # Clean up old images
            docker system prune -f
          EOF
      
      - name: Verify deployment
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} "docker ps"
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} "curl -I http://localhost"
